events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging with security focus
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log security;
    error_log /var/log/nginx/error.log warn;

    # Basic security settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Hide nginx version
    server_tokens off;

    # Buffer overflow protection
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    client_max_body_size 100M;
    large_client_header_buffers 2 1k;

    # Gzip compression with security considerations
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=1r/m;
    limit_req_zone $binary_remote_addr zone=search:10m rate=5r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Upstream servers with health checks
    upstream frontend {
        least_conn;
        server frontend-1:3000 max_fails=3 fail_timeout=30s;
        server frontend-2:3000 max_fails=3 fail_timeout=30s;
        server frontend-3:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream backend {
        least_conn;
        server backend-1:3001 max_fails=3 fail_timeout=30s;
        server backend-2:3001 max_fails=3 fail_timeout=30s;
        server backend-3:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Security headers map
    map $sent_http_content_type $csp_header {
        default "default-src 'self'; script-src 'self' 'nonce-$request_id' https://js.stripe.com https://checkout.stripe.com; style-src 'self' 'nonce-$request_id' https://fonts.googleapis.com; img-src 'self' data: https: blob:; media-src 'self' https: blob:; connect-src 'self' https: wss:; font-src 'self' https://fonts.gstatic.com; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests;";
        ~text/html "default-src 'self'; script-src 'self' 'nonce-$request_id' https://js.stripe.com; style-src 'self' 'nonce-$request_id' https://fonts.googleapis.com; img-src 'self' data: https: blob:; media-src 'self' https: blob:; connect-src 'self' https: wss:; font-src 'self' https://fonts.gstatic.com; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';";
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        return 301 https://$server_name$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name streamflix.com www.streamflix.com;

        # SSL configuration with modern security
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security headers
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy $csp_header always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Connection and rate limiting
        limit_conn conn_limit_per_ip 20;

        # API routes with enhanced security
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Block common attack patterns
            if ($request_uri ~* "(union|select|insert|delete|update|drop|create|alter|exec|execute)") {
                return 403;
            }
            if ($request_uri ~* "(<|>|'|\"|;|\(|\)|&|\|)") {
                return 403;
            }
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            proxy_send_timeout 300s;
            
            # Security headers for API
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
        }

        # GraphQL endpoint with additional protection
        location /graphql {
            limit_req zone=api burst=10 nodelay;
            
            # Only allow POST requests
            if ($request_method !~ ^(POST|OPTIONS)$) {
                return 405;
            }
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_cache_bypass $http_upgrade;
        }

        # Authentication routes with strict rate limiting
        location /api/auth/ {
            limit_req zone=login burst=3 nodelay;
            
            # Additional security for auth endpoints
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Log all auth attempts
            access_log /var/log/nginx/auth.log security;
        }

        # File upload endpoint
        location /api/upload {
            limit_req zone=upload burst=1 nodelay;
            client_max_body_size 100M;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_request_buffering off;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }

        # Search endpoint
        location /api/search {
            limit_req zone=search burst=10 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Video streaming with token validation
        location /videos/ {
            # Validate access token
            access_by_lua_block {
                local token = ngx.var.arg_token
                if not token then
                    ngx.status = 403
                    ngx.say("Access denied: No token provided")
                    ngx.exit(403)
                end
                
                -- Validate token with backend (implement token validation)
                local http = require "resty.http"
                local httpc = http.new()
                local res, err = httpc:request_uri("http://backend/api/validate-video-token", {
                    method = "POST",
                    body = '{"token":"' .. token .. '"}',
                    headers = {
                        ["Content-Type"] = "application/json",
                    }
                })
                
                if not res or res.status ~= 200 then
                    ngx.status = 403
                    ngx.say("Access denied: Invalid token")
                    ngx.exit(403)
                end
            }
            
            alias /var/www/videos/;
            
            # Enable range requests for video streaming
            add_header Accept-Ranges bytes;
            
            # Secure caching
            expires 1d;
            add_header Cache-Control "private, no-transform";
            
            # Restricted CORS
            add_header Access-Control-Allow-Origin "https://streamflix.com";
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            add_header Access-Control-Allow-Headers "Range, Authorization";
            add_header Vary "Origin";
            
            # Security headers for media
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            
            # Log video access
            access_log /var/log/nginx/video_access.log security;
        }

        # Static assets with security headers
        location ~* \.(css|js|ico|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff" always;
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Admin routes with IP restriction
        location /admin {
            # Restrict to specific IP ranges (update with your admin IPs)
            allow 192.168.1.0/24;
            allow 10.0.0.0/8;
            deny all;
            
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Frontend routes
        location / {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # Block common attack patterns
        location ~* \.(php|asp|aspx|jsp|cgi)$ {
            return 444;
        }

        # Block access to sensitive files
        location ~* \.(env|git|svn|htaccess|htpasswd|ini|log|sh|sql|conf)$ {
            deny all;
            return 444;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Custom error pages
        error_page 400 401 403 404 /error.html;
        error_page 500 502 503 504 /error.html;
        
        location = /error.html {
            root /var/www/html;
            internal;
        }
    }

    # API subdomain with enhanced security
    server {
        listen 443 ssl http2;
        server_name api.streamflix.com;

        # SSL configuration (same as main server)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;

        # API-specific security headers
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer" always;
        add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';" always;

        # All requests go to backend
        location / {
            limit_req zone=api burst=20 nodelay;
            limit_conn conn_limit_per_ip 10;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
        }
    }

    # CDN subdomain for video content
    server {
        listen 443 ssl http2;
        server_name cdn.streamflix.com;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cdn-cert.pem;
        ssl_certificate_key /etc/nginx/ssl/cdn-key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;

        # CDN-specific headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header Access-Control-Allow-Origin "https://streamflix.com" always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        add_header Vary "Origin" always;

        # Video content delivery
        location /videos/ {
            alias /var/www/videos/;
            
            # Enable range requests
            add_header Accept-Ranges bytes;
            
            # Long-term caching for video content
            expires 30d;
            add_header Cache-Control "public, max-age=2592000, immutable";
            
            # Gzip compression for manifests
            location ~* \.(m3u8|mpd)$ {
                gzip on;
                gzip_types application/vnd.apple.mpegurl application/dash+xml;
                expires 1h;
                add_header Cache-Control "public, max-age=3600";
            }
        }
    }
}
