version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: streaming_postgres
    environment:
      POSTGRES_DB: streaming_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - streaming_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: streaming_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - streaming_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: streaming_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - streaming_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: streaming_backend
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password123@postgres:5432/streaming_platform
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
      - elasticsearch
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - streaming_network
    restart: unless-stopped
    command: npm run start:dev

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streaming_frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_GRAPHQL_URL=http://localhost:3001/graphql
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - streaming_network
    restart: unless-stopped
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: streaming_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./public/videos:/var/www/videos
    depends_on:
      - frontend
      - backend
    networks:
      - streaming_network
    restart: unless-stopped

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: streaming_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - streaming_network
    restart: unless-stopped
    command: server /data --console-address ":9001"

  # FFmpeg Video Processing Service
  video_processor:
    build:
      context: ./video-processor
      dockerfile: Dockerfile
    container_name: streaming_video_processor
    environment:
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    depends_on:
      - redis
      - minio
    volumes:
      - ./uploads:/app/uploads
      - ./public/videos:/app/output
    networks:
      - streaming_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:

networks:
  streaming_network:
    driver: bridge
